{"meta":{"title":"A Kid","subtitle":null,"description":null,"author":"Fanfan999","url":"https://fanfan999.github.io","root":"/fanfan999.github.io/"},"pages":[{"title":"categories","date":"2019-04-13T13:13:08.000Z","updated":"2019-04-13T13:13:48.331Z","comments":true,"path":"categories/index.html","permalink":"https://fanfan999.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-04-12T15:55:49.785Z","updated":"2019-04-12T15:55:49.785Z","comments":true,"path":"about/index.html","permalink":"https://fanfan999.github.io/about/index.html","excerpt":"","text":"关于我 一个看似20,实则两岁的孩子; 一个正在努力复习的大三狗; 一个想走java开发的菜鸟一号; 还是一个想翻身的咸鱼 From 皮皮 QQ : 1058180192Email : 1058180192@qq.com"},{"title":"tags","date":"2019-04-13T13:12:18.000Z","updated":"2019-04-13T13:14:43.006Z","comments":true,"path":"tags/index.html","permalink":"https://fanfan999.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"冒泡排序,选择排序,插入排序","slug":"冒泡排序,选择排序","date":"2019-04-29T12:56:29.000Z","updated":"2019-05-02T05:31:48.374Z","comments":true,"path":"2019/04/29/冒泡排序,选择排序/","link":"","permalink":"https://fanfan999.github.io/2019/04/29/冒泡排序,选择排序/","excerpt":"","text":"冒泡排序 理解:在水里小泡泡往上面浮,大泡泡往水下沉,所以冒泡排序其实就是前一个和后一个比较,小的放前面,大的放后面. 原理:以int[] arr = {2,3,4,1,9,7,5}为例. 第一圈: 先数组中第一个元素(下标为0)和数组中第二个元素(下标为1)比较大小. arr[0] &gt; arr[1],两者交换. arr[0] &lt;= arr[1],两者不交换 然后比较数组第一个元素(下标为1)和数组第二个元素(下标为2)的大小. arr[1] &gt; arr[2],两者交换. arr[1] &lt;= arr[2],两者不交换 ……以此类推 第一圈结束后,数组中最后一个元素为当前数组最大值. 第二圈(不管第N-1个数): 先数组中第一个元素(下标为0)和数组中第二个元素(下标为1)比较大小. arr[0] &gt; arr[1],两者交换. arr[0] &lt;= arr[1],两者不交换 然后比较数组第一个元素(下标为1)和数组第二个元素(下标为2)的大小. arr[1] &gt; arr[2],两者交换. arr[1] &lt;= arr[2],两者不交换 ……以此类推 第二圈结束后,数组中倒数第二个为当前数组第二个最大值. ……以此类推,共执行N次 代码1234567891011121314151617181920212223242526272829303132333435363738394041public class BubbleSort &#123; public static void main(String[] args) &#123; int[] array = new int[]&#123;2,1,6,9,13,3,4,2&#125;; System.out.println(array.length); //排序前 System.out.println(Arrays.toString(array)); bubbleSort(array); //排序后 System.out.println(Arrays.toString(array)); &#125; private static void bubbleSort(int[] array) &#123; //首先判断array对象是否为空 //然后判断array是否是单个元素数组 if (array == null || array.length &lt; 2) &#123; //是就直接退出 return; &#125; //控制次数(第一个~最后一个--第一个~倒数第二个--以此类推) //array.length - 1才是最后一个元素的下标,因为下标是从0开始的 for (int end = array.length - 1; end &gt; 0; end--) &#123; //j只能指向倒数第二个元素,防止越界 for (int j = 0; j &lt; end; j++) &#123; //前一个比后一个元素值大,交换位置 if (array[j] &gt; array[j + 1]) &#123; swap(j, j + 1, array); &#125; &#125; &#125; &#125; //交换位置 private static void swap(int i, int j, int[] array) &#123; int temp = array[i]; array[i] = array[j]; array[j] = temp; &#125;&#125; 分析: 数组中两两交换和数组寻址都是常数时间O(1)的. 第一个for一共执行N次,第二个for一共执行N-1次,所以一共要执行N^2 + N次. 不要高阶项系数,不要低阶项,所以我们就可以评估冒泡排序的时间复杂度为O(N^2). 其空间复杂度为O(1),因为只用了一个变量没有开辟多余空间. 选择排序 理解:和冒泡排序相反,选择排序是第一个元素依次和后面的每一个元素相比,比后面的小就交换,所以结束第一圈后最小的数就放在了最前面…以此类推,就可以将数组从小到大排序好. 代码1234567891011121314151617181920212223242526272829303132333435363738public class SelectionSort &#123; public static void main(String[] args) &#123; int[] array = new int[]&#123;7, 6, 8, 9, 1, 2, 7, 6, 4&#125;; //排序前 System.out.println(Arrays.toString(array)); selectionSort(array); //排序后 System.out.println(Arrays.toString(array)); &#125; //选择排序代码 private static void selectionSort(int[] array) &#123; //首先判断数组对象是否为空以及是否为单个元素数组 if (array == null || array.length &lt; 2)&#123; return; &#125; //控制循环次数 for (int start = 0; start &lt; array.length; start++) &#123; //注意这里的i只能取到倒数第二个数,防止i+1越界 for (int i = star t; i &lt; array.length - 1; i++) &#123; //如果前一个比后面的大,就交换 if (array[start] &gt; array[i + 1]) &#123; swap(start,i + 1, array); &#125; &#125; &#125; &#125; private static void swap(int start, int i, int[] array) &#123; int temp = array[i]; array[i] = array[start]; array[start] = temp; &#125;&#125; 分析: 数组中两两交换和数组寻址都是常数时间O(1)的. 第一个for一共执行N次,第二个for一共执行N-1次,所以一共要执行N^2 + N次. 不要高阶项系数,不要低阶项,所以我们就可以评估选择排序的时间复杂度为O(N^2). 其空间复杂度为O(1),因为只用了一个变量没有开辟多余空间. 插入排序(重点) 理解:以int[] arr = {3,1,4,1,6}为例,可以理解为斗地主嘛,你手上的牌都从小到大排好序了,拿到一张新的牌可不就得和前面已经拿了的牌一个一个对比嘛,小的放前面,大的放后面,对吧? 首先,第一个位置的数(下标为0)不动,去和第二个位置的数(下标为1)比较(即拿3和1比较). 此时发现3&gt;1,所以arr[0]和arr[1]的值交换. 此时数组为[1,3,4,1,6]. 然后用第二个位置的数(下标为1)去和第三个位置的数(下标为2)比较,(即拿3和4比较) 此时发现3 &lt; 4,所以不交换. 此时数组为[1,3,4,1,6]. 然后用第三个位置的数(下标为2)去和第四个位置的数(下标为3)比较,(即拿4和1比较) 此时发现4 &gt; 1,所以4和1交换位置,得到[1,3,1,4,6]. 再将3和1比较,发现3 &gt; 1,两者交换,得到[1,1,3,4,6]. 再将1和1比较,发现1 == 1,所以不交换. …以此类推 当到数组末尾时结束,得到排序好的数组[1,1,3,4,6]. 代码12345678910111213141516171819202122232425262728293031323334353637383940public static void main(String[] args) &#123; int[] array = new int[]&#123;3, 1, 5, 2, 7, 6, 1&#125;; // 排序前 System.out.println(Arrays.toString(array)); insertionSort(array); // 排序后 System.out.println(Arrays.toString(array)); &#125; //插入排序 private static void insertionSort(int[] array) &#123; //判断数组对象是否为空和是否为单个元素数组 if (array == null || array.length &lt; 2) &#123; return; &#125; //控制开始和结束,到数组末尾就停,i表示右边第一个未排序的元素下标 for (int i = 1; i &lt; array.length; i++) &#123; // 让左边已经排好序的和右边未排序的依次比较,同时和已排序的进行比较,j表示左边已排序的最后一个元素下标 for (int j = i - 1; j &gt;= 0; j--) &#123; //大就交换 if (array[j] &gt; array[j + 1]) &#123; swap(array, j); &#125; &#125; &#125; &#125; //交换 private static void swap(int[] array, int j) &#123; int temp = array[j]; array[j] = array[j + 1]; array[j + 1] = temp; &#125;&#125; 分析: 首先数组寻址,交换位置这些时间复杂度都是O(1)这是没有问题的. 和选择排序和冒泡排序不同的点是:前两个时间复杂度一定是O(N^2),因为不管你数组有序或者无序,你都是要按照流程一个一个比较的,跟数据状况没关系的,但是插入排序不一样,插入排序和数据状况有关系,要分情况. 最好情况下的时间复杂度: 当数组本来就有序时,时间复杂度为O(N),因为没有交换,就和遍历一次数组一样. 最差情况下的时间复杂度 当数组是逆序,而我要的是正序时(比如我要的是[1,2,3,4,5],但是你给的是[5,4,3,2,1]),时间复杂度为O(N^2),每一次都要和前面所有的交换,(例如5要交换4次,4要交换3次这样子),这就形成了一个等差数列(联想到冒泡排序怎么形成等差数列的),所以评估其时间复杂度为O(N^2). 一般情况下的时间复杂度: 一般情况我们一律按照最差情况估计,所以我们一般说插入排序的时间复杂度为O(N^2).","categories":[{"name":"算法","slug":"算法","permalink":"https://fanfan999.github.io/categories/算法/"}],"tags":[{"name":"冒泡排序,选择排序,插入排序","slug":"冒泡排序-选择排序-插入排序","permalink":"https://fanfan999.github.io/tags/冒泡排序-选择排序-插入排序/"}]},{"title":"关于时间复杂度和空间复杂度","slug":"关于时间复杂度和空间复杂度","date":"2019-04-29T11:27:15.000Z","updated":"2019-05-02T05:37:47.151Z","comments":true,"path":"2019/04/29/关于时间复杂度和空间复杂度/","link":"","permalink":"https://fanfan999.github.io/2019/04/29/关于时间复杂度和空间复杂度/","excerpt":"","text":"写在前面的话: 这里写logN就表示以2为底数,因为2为底数打不出来哈哈哈 时间复杂度 用于评价一个算法流程的好坏. 先看时间复杂度的指标(再看常数项),即(N^2)/100 + 10N + 1我们也看成时间复杂度是O(N^2),其中N就是样本量 . 然后再分析不同数据样本下的实际运行时间. 常数时间的操作: 概念:一个操作如果和数据量没有关系,每次都是固定时间内完成的操作,就叫做常数操作,例如加减乘除,位运算操作,数组寻址(就是根据下标获取数组中的元素,比如a[1])等. 时间复杂度为一个算法流程中,最差情况下常数操作数量的指标.常用O表示(读作big O),具体来说,在常数操作数量的表达式中,不要低阶项,只要高阶项,并且忽略掉高阶项的系数,剩下的部分如果记作f(N),那么时间复杂度为O(f(N)). 几个简单的理解时间复杂度的例子: 一个有序数组A,另一个无序数组B,请打印B中的所有不在A中的数,A数组长度为N,B数组长度为M. 算法流程1: 对于数组B中的每一个数,都在A中通过遍历的方式找一下. 很明显该算法的时间复杂度特别大,遍历一次代价为O(N),一共M个数,所以总的代价为O(M*N). 算法流程2: 对于数组B中的每一个数,都在A中通过二分的方式找一下. 二分搜索,比如针对一个有序(假定是从小到大)的数组,假设我要找2有没有在这个数组里. 我先找到中间位置的数,看比2大还是小. 比2大,因为是从小到大排序的,所以中间右边的数字一定比2大,我们就在左边继续划分一半一半地找,直到没有了或者找到了为止. 比2小,说明中间左边的数字一定比2小,我们就在右边继续划分一半一半地找,直到没有了或者找到了为止. 等于2,就直接返回 在这个过程中,我们数组寻址和两个数比较的过程都是常数操作时间的O(1),每次砍一半,这样下来,常数操作次数为logN(以2为底),即一个数组长度为8,最多砍3次. 由此可见,二分查找的时间复杂度为O(logN),以2为底 因此我们也可以推出,查找一次的时间复杂度为O(logN),一共有M个数,时间复杂度则为(MlogN). 算法流程3: 先把B数组排序,然后用类似外排的方式打印所有在A中出现的数. 思路就是,B排序后,两个数组同时从0位置开始,即A[i]和B[i]互相比较. 若A[i] &gt; B[i],则B[i]肯定不在A数组中,打印B[i],然后B数组下标++. 若A[i] &lt; B[i],B数组下标不动,A数组下标++. 若A[i] == B[i],A数组下标不动,B数组下标++. 针对这个流程 第1步:排序的时间复杂度,可以达到NlogN. 第2步:快排,时间复杂度为O(N + M)(N,M为A和B数组长度). 由此可见,该流程的时间复杂度为NlogN + O(N + M). 三个流程,三种时间复杂的表达…我们应该如何分析其好坏? 给长度为N的数组排序(其中寻址,比较操作都是常数级别的). 第一次从0-(N-1)中找出最小值min放在第0个位置,过N个数. 第二次从1-(N-1)中找出最小值min放在第1个位置,过N-1个数. ……以此类推. 一共需要找的次数为(N + (N-1) + ... + 2 + 1),这是一个等差数列,其和为n(n + 1) / 2(这个就可以理解为常数操作数量的表达式),再乘以一个O(1)(它是单次操作所需要的时间),即(n(n + 1) / 2) O(1). 估算其时间复杂度是这样子的: 不要低阶项,只要高阶项,并且忽略掉高阶项的系数. 由此推出上述排序算法时间复杂度为O(n^2). 空间复杂度 空间复杂度其实很好想,开辟了几个新的空间,那就是几,比如我一个循环,循环过程中我新开辟了一个长度为10的数组来存储数据,那么空间复杂度就是O(10),以冒泡排序为例,当两个数需要交换时,我们就会定义一个中间变量temp,这就是我们唯一新开辟空间的地方,这时我们就说冒泡排序的空间复杂度为O(1).","categories":[{"name":"算法基础","slug":"算法基础","permalink":"https://fanfan999.github.io/categories/算法基础/"}],"tags":[{"name":"时间复杂度,空间复杂度","slug":"时间复杂度-空间复杂度","permalink":"https://fanfan999.github.io/tags/时间复杂度-空间复杂度/"}]},{"title":"基础加强_注解","slug":"基础加强-注解","date":"2019-04-29T05:12:55.000Z","updated":"2019-04-29T11:16:29.997Z","comments":true,"path":"2019/04/29/基础加强-注解/","link":"","permalink":"https://fanfan999.github.io/2019/04/29/基础加强-注解/","excerpt":"","text":"本篇文章主要讲注解(Annotation)注解的基本知识 概念:和注释一样,是来说明程序的,但是这个是给计算机看的; 注释: 用文字描述程序的一段话,比如//这是一个方法,这个就是给我们程序猿看的; 关于注解的几个注意的点: JDK1.5之后的新特性 用来说明程序的 注解的格式:@注解名称 注解的作用分类: 编写文档(生成doc文档) 生成api帮助文档,也就是(doc文档),只需要文件夹中用cmd打开dos窗口,输入javadoc 类名.java就可以生成了,然后再打开index.html就可以看到我们写的注解了 直接用dos命令可能会报错或者API有乱码,因为我用的是utf-8但是系统不认识的,所以你这时候只需要用notepad++将该类的编码改成ANSI(即本地默认编码)就可以了(先复制,再粘贴,再保存后就是ANSI编码的了) 代码分析(使用反射) 编译检查(如果你重写方法改名了就会报错) JDK中预定义的一些注解: @Override : 用于检测被该注解标注的方法是否是继承自父类(接口)的,不是会报错; 例子: 1234@Overridepublic String toString()&#123; return super.toString(); &#125; @Deprecated[ˈdeprəkeɪtɪd] : 说明被该注解标注的内容已过时 @SupperessWarnings : 压制警告(黄色警告线) 一般情况下我们会写在类上,使得类中的左右黄色警告线都会没有而且参数一般传递的参数都是&quot;all&quot;; 例子: 1234@SupperessWarnings(\"all\")public void show()&#123; System.out.println(\"abc\");&#125; 此时比如show方法未使用这些黄色警告线都没有了 自定义注解: 格式(包括两部分): 元注解 : 用于描述注解的注解(放在注解类上面) @target : 描述注解能够作用的位置 例子 : @Target(value = {ElementType.TYPE, ElementType.METHOD, ElementType.FIELD}), 其中value还可以省略,因为只有他一个属性 ElementType(这是target的属性)取值 : TYPE : 表示只能作用在类上 METHOD : 表示只能作用于方法上 FIELD : 表示只能作用于成员变量上 @Retention : 描述注解被保留的阶段 @Retention(RetentionPolicy.RUNTIME) : 表示当前被描述的注解,会保留到class字节码文件中,并被jvm读取到(可以直接RetentionPolicy.RUNTIME这样子使用是因为RetentionPolicy是一个枚举类) @Documented : 描述注解是否被抽取到api文档中(生成api文档可以在dos窗口下使用如下命令 : javadoc Hello.java) @inherited : 描述注解是否被子类继承,使用后子类会自动继承这个注解 public @interface 注解名称(){} 例如这样子 : public @interface MyAnno{} 本质 : 注解本质就是一个接口,该接口默认继承Annotation接口(自己写一个接口MyAnno,再反编译一下就知道了) 反编译后就像这样子 : public interface MyAnnotation.MyAnno extends java.lang.annotation.Annotation { } 反编译有一个小技巧,你可以通过软件反编译,也可以通过javap HelloWorld.class这样的命令在dos窗口下反编译 注解的属性 : 即接口中定义的抽象成员方法,常量没啥用不用管 要求 属性的返回值类型(只有下列取值) : 基本数据类型 String(注意只有String,没有其它引用类型) 枚举 注解 以上类型的数组类型 例子如下 : 1234567891011121314public @interface MyAnno&#123; public abstract int show1(); public abstract String show2(); //Student为枚举类 public abstract Student show3(); //MyAnno2为注解类 public abstract MyAnno2 show4(); String[] strs();&#125; 定义了属性,在使用时需要给属性赋值,格式为 : @注解名(方法名 = 返回值类型的值)(其中返回值类型为int就是int类型,String就是String类型,当有多个值时,中间用,隔开就可以了) 例如这样 : @MyAnno(show1 = 10, show2 = &quot;fan&quot;) 但是有一个技巧,就是我们在定义属性的时候就可以给一个默认值(在属性名后面＋default＋默认初始化值),这样在使用时候就可以不给值了 例如 : String name() default &quot;fan&quot; 如果只有一个属性需要赋值,并且属性的名称为value,则value可以省略，多个参数时就必须写上属性 就像这样 : @MyAnno(10) 注意数组赋值时候,用{}包裹,如果只有一个元素的话{}可以不写 注解赋值的例子: @MyAnno(show1 = 10, show2 = &quot;fan&quot;, strs = {&quot;fan1&quot;, &quot;fan2&quot;, show3 = Student.P1}) 在程序中使用(解析)注解 即获取注解中定义的属性值,可以替代配置文件,这里用到了反射 获取注解定义的位置的对象(Class, Method, Field对象) 获取指定的注解 getAnnotation(类类型) 调用注解中的抽象方法来获取配置的属性值其实我觉得这个暂时意义不大,就懒得写了哈哈 小结 以后大多数时候,我们会使用注解,而不会自定义注解 注解给谁用? 编译器 解析程序 注解不是程序的一部分,可有可无,也可以理解为注解就是一个标签","categories":[{"name":"javaee","slug":"javaee","permalink":"https://fanfan999.github.io/categories/javaee/"}],"tags":[{"name":"注解","slug":"注解","permalink":"https://fanfan999.github.io/tags/注解/"}]},{"title":"关于Markdown图片无法显示的问题解决方法","slug":"关于Markdown图片无法显示的问题解决方法","date":"2019-04-28T12:50:49.000Z","updated":"2019-04-29T05:02:04.805Z","comments":true,"path":"2019/04/28/关于Markdown图片无法显示的问题解决方法/","link":"","permalink":"https://fanfan999.github.io/2019/04/28/关于Markdown图片无法显示的问题解决方法/","excerpt":"","text":"备注: 在网上找了半天,一堆不靠谱的试了以后,终于被我试出来了哈哈哈,我可真是个小天才 步骤是这样子的 在自己的github上新建一个仓库, 怎么新建仓库大家应该都会吧,我这里就不赘述了,就像下面这样: 点开自己新建的仓库,在右边有个clone or download,复制下来地址,如图所示: 打开hexo所在文件夹,右键鼠标然后点击 Git Bash Here,然后在本机将github中的仓库克隆下来,命令是: git clone 仓库地址(地址就是你复制下来的地址),不懂就看图吧: 克隆成功后在hexo文件夹中会有一个以你的仓库名命名的文件夹,例如我的是MyPostImage,然后将图片放在该文件夹下就行; 注意: 这里有个小技巧:你可以每次要在一篇博客中添加图片时候,新建一个和本篇博客名字相同的文件夹放在MyPostImage下面,这样就比较容易整理; 你要是怕自己新建的文件夹和博客名字不一致,你可以这样子新建一篇博客文章:在bash窗口下输入命令hexo n &quot;博客名字&quot;,这样子系统就会自动在hexo &gt; source &gt; _posts路径下生成一个和本篇博客名相同的文件夹,然后将文件夹复制到MyPostImage下面就可以了. 进入MyPostImage文件夹(注意不是和博客名字相同的那个文件夹,是名字和仓库名相同的的文件夹),右键鼠标然后点击 Git Bash Here,打开Bash窗口然后输入git add .,(注意这里有一个点),然后输入命令git commit -m &quot;文件名&quot;,最后将内容推送上仓库就可以了,命令是:git push origin master; 上传成功后去自己的github仓库看看,你就会发现,产生了一个git commit -m &quot;文件名&quot;中以文件名为名字的文件夹,图片就在该文件夹中,就像这样子: 点击图片,当你看到图片以后,复制该图片的路径.就像这样: 然后打开我的新建的md文件,并且插入图片,代码是:![图片名](图片路径 &quot;图片无法显示或鼠标移上去的时候显示的文字&quot;),例子如下(这个图片是我在网上偷的啊哈哈): 但是我们预览的时候会出现一个问题,就是预览的时候图片还是显示不出来,这个时候我们改路径的一个文件名就可以了,因为github和md文件关联的图片地址是有一定格式的,格式如下: https://github.com/用户名/repository仓库名/raw/分支名master/图片文件夹名称/***.png or***.jpg 看不懂吧,其实就是将blob改成raw就行,万一还看不懂就看图: 在bash下运行博客,你会发现图片这时候就可以看到了,大功告成哈哈! 其实这里面可能还有很多技巧啥的,我暂时还不会,暂时会这个就可以了吧哈哈哈,因为反正图片不是太多,要是有啥不清楚的,随时可以通过博客联系我,在about里面可以找到我哈哈哈,最后附上一张我很喜欢的图片吧,希望各位和它一样每天都开心!","categories":[{"name":"随笔","slug":"随笔","permalink":"https://fanfan999.github.io/categories/随笔/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://fanfan999.github.io/tags/Markdown/"}]},{"title":"Markdown的基本语法<br>","slug":"Markdown语法","date":"2019-04-28T12:23:56.544Z","updated":"2019-04-29T08:01:55.815Z","comments":true,"path":"2019/04/28/Markdown语法/","link":"","permalink":"https://fanfan999.github.io/2019/04/28/Markdown语法/","excerpt":"","text":"写在前面的话: 之前一直手抄做笔记复习,没有想着用博客,后来觉得手写太慢了,所以准备好好利用一下我的博客作为复习仓库,在这里先熟悉下Markdown语法 Markdown标题 使用#表示1-6级标题,一级对应一个#号,二级标题对应两个#号,以此类推; 其中一级标题还可以在文字下方加一行=====,这个等号几个无所谓;二级标题可以在下面加----,几个符号也是无所谓的; 注意事项: Markdown写文章时,一定要在符号后面空格一下再写文章,比如* a这样子,不然符号不会起到作用的; Markdown中可以行与行之间通过空一行来实现换行,也可以通过&lt;br&gt;来实现换行; 将文字放在可以实现高亮(不过这个不是分号,是esc键下面,tab键上面的那个按键)中间来实现高亮强调的效果; Markdown段落格式 字体 *斜体文本*和_斜体文本_都表示斜体; **粗体文本**和__粗体文本__都表示粗体;***粗斜体文本***和____粗斜体文本___都表示粗斜体文本; 分隔线 可以在一行下面用 *** 或者 --- 或者 ___ 来建立一个分隔线; 通过在文本前面添加&lt;u&gt;实现带下划线文本; 脚注 脚注是用来对文本进行补充说明的,你把鼠标移上去会有提示,格式是这样子的[^要注明的文本]; Markdown列表 无序列表 使用星号(),加号(+)或者减号(-)作为列表标记,我这里用的就是无序列表呀哈哈哈,如果要有层次感的话,就敲一个tab键再敲`,+,-`就好了,不过都要记得敲完符号了记得敲个空格哈; 例如这样子: 第1项 第1.1项 *第1.2项 第2项 第2.1项 第2.2项 第3项 第3.1项 第3.2项 有序列表 使用数字并加上.来表示; 就像这样子: 第1项 第1.1项 第2项 第2.1项 列表嵌套 列表嵌套很简单,下一行时,在前面添加四个空格就可以了; 就是这样子的: 第1项: 第1.1项 第2项 第2.2项 Markdown区块 这也是为了分层好看用的,其实和缩进也差不多了,就是用&gt;表示最外层,&gt;&gt;表示第二层,依次类推; 例子是这样的: 第1块 第1.1块 第2块 第2.2块 这个也是可以嵌套列表使用的; 例子如下: 区块中的列表 第1项 第2项 第1项 第2项 但是这里有两个要注意的地方: 就是如果要在列表中放区块,就需要在&gt;前面添加四个空格的缩进; 就像这个样子: 第一项 &gt; 我是fanfan999, 最爱lcl 使用&gt;缩进后,行与行之间必须空行,不然效果不出来; Markdown代码 这才是最重要的部分哈哈哈,不过前面都差不多提到了,那就再回顾一遍吧; 一点点代码可以用给包起来就行,例如System.out.println(&quot;fanfan999&quot;); 想要多行代码成为一块很显眼的地方,也就是高亮啦,我们可以使用在代码前一行和后一行添加三个这个`符号,在符号后面还可以备注什么语言,当然不备注也是可以的; 例子如下:123public static void main(String[] args)&#123; System.out.println(\"fanfan999\");&#125; Markdown超链接 格式是这样子的:[要显示的文字](链接的地址); 例如我的: 我的博客; 当然也可以直接使用地址哈哈哈!不过要把网址用&lt;&gt;包起来 像这样:https://fanfan999.github.io/fanfan999.github.io/; Markdown插入图片 图片格式如下: ! [alt 图片的替代文字] (图片地址 “可选标题”),也就是一个感叹号!+一个方括号[]+一个普通括号(),其中的最后一个”可选标题”效果就是你鼠标放上去会显示的文字,可写可不写, 也可以放本地图片,语法一样的,只是地址改为本地地址就好了 这个图片嘛…emmm,我自己试了显示不出来哈哈哈哈,对不起,是我太菜了,我搞出来了再补充.","categories":[{"name":"随笔","slug":"随笔","permalink":"https://fanfan999.github.io/categories/随笔/"}],"tags":[{"name":"Markdown<br>","slug":"Markdown-br","permalink":"https://fanfan999.github.io/tags/Markdown-br/"}]},{"title":"这是我的第一篇博客了","slug":"从今天起,","date":"2019-04-12T14:47:36.000Z","updated":"2019-04-12T15:39:36.049Z","comments":true,"path":"2019/04/12/从今天起,/","link":"","permalink":"https://fanfan999.github.io/2019/04/12/从今天起,/","excerpt":"","text":"从今天起, 我也是一个有博客的菜鸟了哈哈哈!用博客来记录我的复习,希望秋招能找到一个好工作吧!","categories":[],"tags":[]}]}